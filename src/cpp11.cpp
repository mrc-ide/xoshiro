// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"

// xoshiro.cpp
SEXP xoshiro_rng_alloc(cpp11::sexp r_seed, int n_generators);
extern "C" SEXP _xoshiro_xoshiro_rng_alloc(SEXP r_seed, SEXP n_generators) {
  BEGIN_CPP11
    return cpp11::as_sexp(xoshiro_rng_alloc(cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(r_seed), cpp11::as_cpp<cpp11::decay_t<int>>(n_generators)));
  END_CPP11
}
// xoshiro.cpp
int xoshiro_rng_size(SEXP ptr);
extern "C" SEXP _xoshiro_xoshiro_rng_size(SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(xoshiro_rng_size(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr)));
  END_CPP11
}
// xoshiro.cpp
void xoshiro_rng_jump(SEXP ptr);
extern "C" SEXP _xoshiro_xoshiro_rng_jump(SEXP ptr) {
  BEGIN_CPP11
    xoshiro_rng_jump(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr));
    return R_NilValue;
  END_CPP11
}
// xoshiro.cpp
void xoshiro_rng_long_jump(SEXP ptr);
extern "C" SEXP _xoshiro_xoshiro_rng_long_jump(SEXP ptr) {
  BEGIN_CPP11
    xoshiro_rng_long_jump(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr));
    return R_NilValue;
  END_CPP11
}
// xoshiro.cpp
cpp11::writable::doubles xoshiro_rng_unif_rand(SEXP ptr, int n);
extern "C" SEXP _xoshiro_xoshiro_rng_unif_rand(SEXP ptr, SEXP n) {
  BEGIN_CPP11
    return cpp11::as_sexp(xoshiro_rng_unif_rand(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<int>>(n)));
  END_CPP11
}
// xoshiro.cpp
cpp11::writable::doubles xoshiro_rng_norm_rand(SEXP ptr, int n);
extern "C" SEXP _xoshiro_xoshiro_rng_norm_rand(SEXP ptr, SEXP n) {
  BEGIN_CPP11
    return cpp11::as_sexp(xoshiro_rng_norm_rand(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<int>>(n)));
  END_CPP11
}
// xoshiro.cpp
cpp11::writable::doubles xoshiro_rng_runif(SEXP ptr, int n, cpp11::doubles r_min, cpp11::doubles r_max);
extern "C" SEXP _xoshiro_xoshiro_rng_runif(SEXP ptr, SEXP n, SEXP r_min, SEXP r_max) {
  BEGIN_CPP11
    return cpp11::as_sexp(xoshiro_rng_runif(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<int>>(n), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_min), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_max)));
  END_CPP11
}
// xoshiro.cpp
cpp11::writable::doubles xoshiro_rng_rnorm(SEXP ptr, int n, cpp11::doubles r_mean, cpp11::doubles r_sd);
extern "C" SEXP _xoshiro_xoshiro_rng_rnorm(SEXP ptr, SEXP n, SEXP r_mean, SEXP r_sd) {
  BEGIN_CPP11
    return cpp11::as_sexp(xoshiro_rng_rnorm(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<int>>(n), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_mean), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_sd)));
  END_CPP11
}
// xoshiro.cpp
cpp11::writable::integers xoshiro_rng_rbinom(SEXP ptr, int n, cpp11::integers r_size, cpp11::doubles r_prob);
extern "C" SEXP _xoshiro_xoshiro_rng_rbinom(SEXP ptr, SEXP n, SEXP r_size, SEXP r_prob) {
  BEGIN_CPP11
    return cpp11::as_sexp(xoshiro_rng_rbinom(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<int>>(n), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(r_size), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_prob)));
  END_CPP11
}
// xoshiro.cpp
cpp11::writable::integers xoshiro_rng_rpois(SEXP ptr, int n, cpp11::doubles r_lambda);
extern "C" SEXP _xoshiro_xoshiro_rng_rpois(SEXP ptr, SEXP n, SEXP r_lambda) {
  BEGIN_CPP11
    return cpp11::as_sexp(xoshiro_rng_rpois(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<int>>(n), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_lambda)));
  END_CPP11
}
// xoshiro.cpp
cpp11::writable::raws xoshiro_rng_state(SEXP ptr);
extern "C" SEXP _xoshiro_xoshiro_rng_state(SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(xoshiro_rng_state(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr)));
  END_CPP11
}

extern "C" {
/* .Call calls */
extern SEXP _xoshiro_xoshiro_rng_alloc(SEXP, SEXP);
extern SEXP _xoshiro_xoshiro_rng_jump(SEXP);
extern SEXP _xoshiro_xoshiro_rng_long_jump(SEXP);
extern SEXP _xoshiro_xoshiro_rng_norm_rand(SEXP, SEXP);
extern SEXP _xoshiro_xoshiro_rng_rbinom(SEXP, SEXP, SEXP, SEXP);
extern SEXP _xoshiro_xoshiro_rng_rnorm(SEXP, SEXP, SEXP, SEXP);
extern SEXP _xoshiro_xoshiro_rng_rpois(SEXP, SEXP, SEXP);
extern SEXP _xoshiro_xoshiro_rng_runif(SEXP, SEXP, SEXP, SEXP);
extern SEXP _xoshiro_xoshiro_rng_size(SEXP);
extern SEXP _xoshiro_xoshiro_rng_state(SEXP);
extern SEXP _xoshiro_xoshiro_rng_unif_rand(SEXP, SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_xoshiro_xoshiro_rng_alloc",     (DL_FUNC) &_xoshiro_xoshiro_rng_alloc,     2},
    {"_xoshiro_xoshiro_rng_jump",      (DL_FUNC) &_xoshiro_xoshiro_rng_jump,      1},
    {"_xoshiro_xoshiro_rng_long_jump", (DL_FUNC) &_xoshiro_xoshiro_rng_long_jump, 1},
    {"_xoshiro_xoshiro_rng_norm_rand", (DL_FUNC) &_xoshiro_xoshiro_rng_norm_rand, 2},
    {"_xoshiro_xoshiro_rng_rbinom",    (DL_FUNC) &_xoshiro_xoshiro_rng_rbinom,    4},
    {"_xoshiro_xoshiro_rng_rnorm",     (DL_FUNC) &_xoshiro_xoshiro_rng_rnorm,     4},
    {"_xoshiro_xoshiro_rng_rpois",     (DL_FUNC) &_xoshiro_xoshiro_rng_rpois,     3},
    {"_xoshiro_xoshiro_rng_runif",     (DL_FUNC) &_xoshiro_xoshiro_rng_runif,     4},
    {"_xoshiro_xoshiro_rng_size",      (DL_FUNC) &_xoshiro_xoshiro_rng_size,      1},
    {"_xoshiro_xoshiro_rng_state",     (DL_FUNC) &_xoshiro_xoshiro_rng_state,     1},
    {"_xoshiro_xoshiro_rng_unif_rand", (DL_FUNC) &_xoshiro_xoshiro_rng_unif_rand, 2},
    {NULL, NULL, 0}
};
}

extern "C" void R_init_xoshiro(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
}
